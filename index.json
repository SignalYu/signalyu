[{"content":"Java 中子类是否继承父类的私有属性？大家的疑惑无非是：如果子类不继承父类的私有属性，那子类对象为什么包含父类的私有属性？博主之前也同样疑惑，在查阅了相关资料后，得出如下结论：\n子类对象确实存在父类的私有属性，但子类不继承父类的私有属性。\n子类对象包含父类私有属性 首先，博主先验证子类对象包含父类的私有属性，代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 class Parent { private int privateField; public Parent() { System.out.println(\u0026#34;this in Parent() =\u0026gt; \u0026#34; + this); this.privateField = 666; } public Parent(int privateField) { System.out.println(\u0026#34;this in Parent(int) =\u0026gt; \u0026#34; + this); this.privateField = privateField; } private void printPrivateField() { System.out.println(this.privateField); } public void accessPrivateMembers() { System.out.println(\u0026#34;this in accessPrivateMembers() =\u0026gt; \u0026#34; + this); System.out.print(\u0026#34;调用 this.printPrivateField() 方法 =\u0026gt; \u0026#34;); this.printPrivateField(); } } class Child extends Parent { public Child() { System.out.println(\u0026#34;this in Child() =\u0026gt; \u0026#34; + this); } } public class Main { public static void main(String[] args) { Child child = new Child(); child.accessPrivateMembers(); } } 上述代码的输出结果如下：\nthis in Parent() =\u0026gt; Child@372f7a8d this in Child() =\u0026gt; Child@372f7a8d this in accessPrivateMembers() =\u0026gt; Child@372f7a8d 调用 this.printPrivateField() 方法 =\u0026gt; 666 上述代码中，执行 new Child() 后，会调用子类 Child 的无参构造器，而在子类构造器中默认会调用父类的无参构造器。而从输出结果可知，父类无参构造中的 this 指向子类 Child。并且 this.privateField = 666; 也成功执行。同样地，在调用公有（public）方法 accessPrivateMembers() 时，此时的 this 为 Child，并且通过 this 也可以访问父类的私有方法 printPrivateFields()。显然，this 中包含父类的私有属性 privateField 和私有方法 printPrivateField()。事实上，我们可以通过 org.openjdk.jol 工具中的 ClassLayout 来查看 child 对象在内存中的布局。代码如下：\n1 2 3 4 5 6 7 import org.openjdk.jol.info.ClassLayout; public static void main(String[] args) { Child child = new Child(); String childLayout = ClassLayout.parseInstance(child).toPrintable(); System.out.println(childLayout); } 上述代码输出结果为：\n1 2 3 4 5 6 7 Child object internals: OFF SZ TYPE DESCRIPTION VALUE 0 8 (object header: mark) 0x000000372f7a8d01 (hash: 0x372f7a8d; age: 0) 8 4 (object header: class) 0x01001418 12 4 int Parent.privateField 666 Instance size: 16 bytes Space losses: 0 bytes internal + 0 bytes external = 0 bytes total 根据上述输出结果可以看出，child 对象中确实包含父类的私有属性。\n那么问题来了，如果子类对象不继承父类的私有属性，那为什么子类可以通过 this 访问到父类的私有属性。在回答这个问题之前，我们先来看 Java 语言规范中关于类成员的规定。\nJava 类成员 Java 语言规范中关于类成的部分陈述如下：\n类的成员包括以下所有成员（The members of a class type are all of the following）：\n从除 Object 类之外的直接父类继承的成员（Members inherited from its direct superclass, except in class Object, which has no direct superclass） 从任何直接父接口继承的成员（Members inherited from any direct superinterfaces） 类中声明的成员（Members declared in the body of the class） 类中声明为私有的成员不会被该类的子类继承。（Members of a class that are declared private are not inherited by subclasses of that class.）\n只有声明为受保护（protected）或公共（public）的类成员才会被本包外的子类继承。（Only members of a class that are declared protected or public are inherited by subclasses declared in a package other than the one in which the class is declared.）\n构造器（constructors）、静态初始化器（static initializers）和实例初始化器（instance initializers）不是类成员，因此不会被继承。（Constructors, static initializers, and instance initializers are not members and therefore are not inherited.）\n超类的私有成员 了解完 Java 类成员后，再来看 Oracle 官方 Java 教程中关于超类的私有成员的说明：\n子类不继承父类的私有成员。不过，如果超类有访问其私有字段的公共或保护方法，子类也可以使用这些方法（间接访问父类的私有属性）。（A subclass does not inherit the private members of its parent class. However, if the superclass has public or protected methods for accessing its private fields, these can also be used by the subclass.）\n官方已明确说明子类不继承父类的私有成员，那为什么子类对象可以访问父类的私有成员呢？ 博主认为，继承是发生在类之间行为，而非对象之间的行为。子类 Child 不继承父类 Parent 的私有成员，并不代表子类对象 child 不可以拥有父类的属性。\n综上所述，子类不继承父类的私有成员，但子类对象包含父类的私有成员，并且可以通过父类提供的公有（public）或受保护（protected）方法来访问。\n参考资料 知乎：java中子类有没有继承父类的私有变量？ Java Language Specification : 8.2. Class Members Oracle Java Tutorial: Private Members in a Superclass Do subclasses inherit private fields? ","permalink":"/posts/tech/0001-java-private-inheritance/","summary":"Java 中子类是否继承父类的私有属性？大家的疑惑无非是：如果子类不继承父类的私有属性，那子类对象为什么包含父类的私有属性？博主之前也同样疑惑，在查阅了相关资料后，得出如下结论：\n子类对象确实存在父类的私有属性，但子类不继承父类的私有属性。\n子类对象包含父类私有属性 首先，博主先验证子类对象包含父类的私有属性，代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 class Parent { private int privateField; public Parent() { System.out.println(\u0026#34;this in Parent() =\u0026gt; \u0026#34; + this); this.privateField = 666; } public Parent(int privateField) { System.out.println(\u0026#34;this in Parent(int) =\u0026gt; \u0026#34; + this); this.","title":"Java 中父类的私有属性可以被子类继承吗？"}]