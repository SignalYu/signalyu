<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>数据结构与算法 on 信一的博客</title>
    <link>https://signalyu.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 数据结构与算法 on 信一的博客</description>
    <generator>Hugo -- 0.126.1</generator>
    <language>zh</language>
    <lastBuildDate>Sun, 23 Jun 2024 09:42:24 +0800</lastBuildDate>
    <atom:link href="https://signalyu.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>数据结构与算法：递归</title>
      <link>https://signalyu.github.io/posts/4-engineering-and-technology/computer-science/dsa/algorithms/3-recursion/</link>
      <pubDate>Sun, 23 Jun 2024 09:42:24 +0800</pubDate>
      <guid>https://signalyu.github.io/posts/4-engineering-and-technology/computer-science/dsa/algorithms/3-recursion/</guid>
      <description>递归定义 递归（Recursion）是指函数在执行过程中调用自身的过程，通常用于将问题划分为类似的子问题。递归函数通常由两部分组成：
基本情况（Base Case(s)）：基本情况指的是函数用于避免无限递归、停止调用自身的条件。（寻找最小子问题） 递归情况（Recursive Case(s)）：递归情况是指函数使用不同参数调用自身，并逐渐向基本情况靠拢。（寻找每调用一次函数能缩小问题规模的最小单元） 例题 字符串反转 点击查看题目 字符串反转：&amp;ldquo;signal yu&amp;rdquo; 输出为 &amp;ldquo;uy langis&amp;rdquo; 基本情况：当字符串 s 为空串时返回 &amp;quot;&amp;quot;，当字符串 s 长度为 1 时，返回 s，即当字符串长度小于等于 1 时，返回 s。 递归情况：执行一次函数操作一个字符，因此每调用一次函数能缩小问题规模的最小单元为 1。 public class ReverseString { // 递归方法反转字符串 public static String reverseString(String s) { // 基本情况：如果字符串为空或只有一个字符，直接返回它 if (s.length() &lt;= 1) { return s; } // 递归情况：取出第一个字符，并将剩余字符串反转后再将第一个字符加到末尾 return reverseString(s.substring(1)) + s.charAt(0); } public static void main(String[] args) { String inputStr = &#34;signal yu&#34;; String reversedStr = reverseString(inputStr); System.</description>
    </item>
    <item>
      <title>数据结构与算法：投票算法</title>
      <link>https://signalyu.github.io/posts/4-engineering-and-technology/computer-science/dsa/algorithms/1-boyer-moore-voting-algorithm/</link>
      <pubDate>Fri, 31 May 2024 15:40:35 +0800</pubDate>
      <guid>https://signalyu.github.io/posts/4-engineering-and-technology/computer-science/dsa/algorithms/1-boyer-moore-voting-algorithm/</guid>
      <description>Boyer Moore 投票算法逻辑步骤 初始化候选人（candidate）和计票器（counter）； 遍历数组寻找可能为最大元素的候选人： count == 0 --&amp;gt; candidate = current element; count = 0 (current element == candidate) ? count++ : count-- 遍历数组验证候选人是否为多数元素（majority element）： count = 0 (current element == candidate) ? count++ 判断 count 是否过半 Boyer Moore 投票算法核心：只要数组中某元素出现次数过半，则遍历完毕后 candidate 变量必然指向该元素。 点击查看代码 majorityElement.c 测试代码 输出结果 int majorityElement(int const nums[], int size) { // 初始化候选人和计票器 int candidate = 0; int count = 0; // 遍历数组确定候选人 for (int i = 0; i &lt; size; i++) { if (count == 0) { candidate = nums[i]; count++; } else if (nums[i] == candidate) { count++; } else { count--; } } // 遍历数组判断候选人是否为多数元素 count = 0; for (int i = 0; i &lt; size; i++) { if (nums[i] == candidate) { count++; } } // 存在多数元素 if (count &gt; size / 2) { return candidate; } // 不存在多数元素 return -1; } #include &amp;lt;stdio.</description>
    </item>
  </channel>
</rss>
