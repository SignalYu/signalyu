<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Spring on Signal&#39;s Blog</title>
    <link>https://signalyu.github.io/tags/spring/</link>
    <description>Recent content in Spring on Signal&#39;s Blog</description>
    <generator>Hugo -- 0.125.1</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 17 May 2024 16:11:35 +0800</lastBuildDate>
    <atom:link href="https://signalyu.github.io/tags/spring/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Spring：Bean 生命周期</title>
      <link>https://signalyu.github.io/posts/tech/spring/3-bean-life-cycle/</link>
      <pubDate>Fri, 17 May 2024 16:11:35 +0800</pubDate>
      <guid>https://signalyu.github.io/posts/tech/spring/3-bean-life-cycle/</guid>
      <description>Bean 生命周期状态图 graph TB subgraph state[ ] s1[1. 声明 Bean Definitions] --&gt; s2[2. 加载 Bean Definitions] --&gt; s3[3. 处理 Bean Definitions] --&gt; s4[4. Bean 实例化] --&gt; s5[5. Bean 属性赋值] --&gt; s6[6. Bean 后置处理（初始化前）] --&gt; s7[7. Bean 初始化] --&gt; s8[8. Bean 后置处理（初始化后）] --&gt; s9[9. Bean 存储在 IoC 容器中] --&gt; s10[10. 销毁 Bean] end n1[&#34;`使用 XML，带包扫描的注解，带有 @Configuration 注解的类声明 Bean`&#34;] -.- s1 n2[&#34;`**BeanDefinitionReader**：解析配置并创建 BeanDefinition对象`&#34;] -.- s2 n3[&#34;`**BeanFactoryPostProcessor**：在实际创建 Bean 之前修改 BeanDefinitions`&#34;] -.- s3 n4[&#34;`**BeanFactory**：调用 Bean 的构造函数。需要时会将实例化行为委托给自定义 FactoryBean 实例。`&#34;</description>
    </item>
    <item>
      <title>Spring：理解 AOP</title>
      <link>https://signalyu.github.io/posts/tech/spring/2-spring-aop/</link>
      <pubDate>Sun, 12 May 2024 13:19:15 +0800</pubDate>
      <guid>https://signalyu.github.io/posts/tech/spring/2-spring-aop/</guid>
      <description>AOP 相关概念 AOP 相关概念 横切关注点（Crosscutting Concern）：横切关注点是指业务处理过程中的附加功能。一类业务可以有多个横切关注点（附加功能），例如上述例子中的的借书方法具有日志和安全校验两个附加功能，即具有两个横切关注点。 切面（Aspect）：在不同类业务中提取的同类核心关注点构成的模块称为切面。例如上述例子中的借书和还书方法可提取出日志切面（LoggingAspect）和校验切面（AuthenticationAspect）。 连接点（Joint Point）：连接点是指业务处理过程中能够应用切面功能的位置。 通知（Advice）：通知是指切面在某个特定连接点上触发的行为。 切入点（Pointcut）：切入点是指业务处理过程中实际应用切面功能的连接点位置。例如核心业务处理前，核心业务成功处理后，核心业务处理发生异常时等等。 织入（Weaving）：织入是指将附加功能集成到目标对象的过程。 AOP 代码 点击查看代码 BookService BookServiceImpl LoggingAspect AuthenticationAspect BookServiceTest beans.xml 输出结果 package org.signalyu; public interface BookService { boolean borrowBook(String bookId); boolean returnBook(String bookId); } package org.signalyu; import org.springframework.stereotype.Service; import java.util.HashMap; import java.util.Map; @Service public class BookServiceImpl implements BookService { final private Map&amp;ltString, Boolean&gt; bookStatus = new HashMap&amp;lt;&gt;(); public BookServiceImpl() { // Initialize book status map with some books available initially bookStatus.</description>
    </item>
    <item>
      <title>Spring：理解控制反转和依赖注入</title>
      <link>https://signalyu.github.io/posts/tech/spring/1-spring-ioc-di/</link>
      <pubDate>Sun, 12 May 2024 08:37:38 +0800</pubDate>
      <guid>https://signalyu.github.io/posts/tech/spring/1-spring-ioc-di/</guid>
      <description>控制反转 控制反转（IoC）：控制反转是一种设计原则，指的是对象的创建和管理权从应用程序的某个对象反转给 IoC 容器。如下图所示，汽车类（Car）依赖于引擎类（Engine），即 Car 类对其依赖—— Engine 类对象的创建具有控制权。在传统模式下，Car 类必须在其内部创建 Engine 类。而在 IoC 模式下，Engine 类对象的创建和管理由外部实体——IoC 容器完成，也就是说，对 Engine 类对象的创建和管理权限由 Car 类转移到 IoC 容器中。由于在 IoC 模式下 Car 类不需要在其内部创建 Engine 类对象，因此实现了代码解耦。
graph LR direction LR subgraph traditional[传统模式] direction LR car[Car] -.- depend((依赖)) -.-&gt; engine[Engine] car --&gt;|创建| engine end graph subgraph iocPattern[IoC 模式] car[Car] -.- depend((依赖)) -.-&gt; engine[Engine] config[XML/注解配置] ==&gt; ioc[IoC 容器] --&gt;|依赖注入| depend ioc --&gt;|创建| car &amp; engine end 传统模式代码 Car.java Engine.java package org.signalyu; public class Car { private Engine engine; public Car() { // Car 类在其内部创建 Engine 类 this.</description>
    </item>
  </channel>
</rss>
